# encoding: utf8
"""Defines a construct `pokemon_struct`, containing the structure of a single
Pokémon saved within a game -- often seen as a .pkm file.  This is the same
format sent back and forth over the GTS.
"""

import datetime

from construct import *

# TODO:
# - strings should be validated, going both in and out
# - strings need to pad themselves when being re-encoded
# - strings sometimes need specific padding christ
# - date_met is not optional
# - some way to be more lenient with junk data, or at least
# - higher-level validation; see XXXes below
# - personality indirectly influences IVs due to PRNG use

# The entire gen 4 character table:
character_table = {
    0x0002: 'ぁ',
    0x0003: 'あ',
    0x0004: 'ぃ',
    0x0005: 'い',
    0x0006: 'ぅ',
    0x0007: 'う',
    0x0008: 'ぇ',
    0x0009: 'え',
    0x000a: 'ぉ',
    0x000b: 'お',
    0x000c: 'か',
    0x000d: 'が',
    0x000e: 'き',
    0x000f: 'ぎ',
    0x0010: 'く',
    0x0011: 'ぐ',
    0x0012: 'け',
    0x0013: 'げ',
    0x0014: 'こ',
    0x0015: 'ご',
    0x0016: 'さ',
    0x0017: 'ざ',
    0x0018: 'し',
    0x0019: 'じ',
    0x001a: 'す',
    0x001b: 'ず',
    0x001c: 'せ',
    0x001d: 'ぜ',
    0x001e: 'そ',
    0x001f: 'ぞ',
    0x0020: 'た',
    0x0021: 'だ',
    0x0022: 'ち',
    0x0023: 'ぢ',
    0x0024: 'っ',
    0x0025: 'つ',
    0x0026: 'づ',
    0x0027: 'て',
    0x0028: 'で',
    0x0029: 'と',
    0x002a: 'ど',
    0x002b: 'な',
    0x002c: 'に',
    0x002d: 'ぬ',
    0x002e: 'ね',
    0x002f: 'の',
    0x0030: 'は',
    0x0031: 'ば',
    0x0032: 'ぱ',
    0x0033: 'ひ',
    0x0034: 'び',
    0x0035: 'ぴ',
    0x0036: 'ふ',
    0x0037: 'ぶ',
    0x0038: 'ぷ',
    0x0039: 'へ',
    0x003a: 'べ',
    0x003b: 'ぺ',
    0x003c: 'ほ',
    0x003d: 'ぼ',
    0x003e: 'ぽ',
    0x003f: 'ま',
    0x0040: 'み',
    0x0041: 'む',
    0x0042: 'め',
    0x0043: 'も',
    0x0044: 'ゃ',
    0x0045: 'や',
    0x0046: 'ゅ',
    0x0047: 'ゆ',
    0x0048: 'ょ',
    0x0049: 'よ',
    0x004a: 'ら',
    0x004b: 'り',
    0x004c: 'る',
    0x004d: 'れ',
    0x004e: 'ろ',
    0x004f: 'わ',
    0x0050: 'を',
    0x0051: 'ん',
    0x0052: 'ァ',
    0x0053: 'ア',
    0x0054: 'ィ',
    0x0055: 'イ',
    0x0056: 'ゥ',
    0x0057: 'ウ',
    0x0058: 'ェ',
    0x0059: 'エ',
    0x005a: 'ォ',
    0x005b: 'オ',
    0x005c: 'カ',
    0x005d: 'ガ',
    0x005e: 'キ',
    0x005f: 'ギ',
    0x0060: 'ク',
    0x0061: 'グ',
    0x0062: 'ケ',
    0x0063: 'ゲ',
    0x0064: 'コ',
    0x0065: 'ゴ',
    0x0066: 'サ',
    0x0067: 'ザ',
    0x0068: 'シ',
    0x0069: 'ジ',
    0x006a: 'ス',
    0x006b: 'ズ',
    0x006c: 'セ',
    0x006d: 'ゼ',
    0x006e: 'ソ',
    0x006f: 'ゾ',
    0x0070: 'タ',
    0x0071: 'ダ',
    0x0072: 'チ',
    0x0073: 'ヂ',
    0x0074: 'ッ',
    0x0075: 'ツ',
    0x0076: 'ヅ',
    0x0077: 'テ',
    0x0078: 'デ',
    0x0079: 'ト',
    0x007a: 'ド',
    0x007b: 'ナ',
    0x007c: 'ニ',
    0x007d: 'ヌ',
    0x007e: 'ネ',
    0x007f: 'ノ',
    0x0080: 'ハ',
    0x0081: 'バ',
    0x0082: 'パ',
    0x0083: 'ヒ',
    0x0084: 'ビ',
    0x0085: 'ピ',
    0x0086: 'フ',
    0x0087: 'ブ',
    0x0088: 'プ',
    0x0089: 'ヘ',
    0x008a: 'ベ',
    0x008b: 'ペ',
    0x008c: 'ホ',
    0x008d: 'ボ',
    0x008e: 'ポ',
    0x008f: 'マ',
    0x0090: 'ミ',
    0x0091: 'ム',
    0x0092: 'メ',
    0x0093: 'モ',
    0x0094: 'ャ',
    0x0095: 'ヤ',
    0x0096: 'ュ',
    0x0097: 'ユ',
    0x0098: 'ョ',
    0x0099: 'ヨ',
    0x009a: 'ラ',
    0x009b: 'リ',
    0x009c: 'ル',
    0x009d: 'レ',
    0x009e: 'ロ',
    0x009f: 'ワ',
    0x00a0: 'ヲ',
    0x00a1: 'ン',
    0x00a2: '０',
    0x00a3: '１',
    0x00a4: '２',
    0x00a5: '３',
    0x00a6: '４',
    0x00a7: '５',
    0x00a8: '６',
    0x00a9: '７',
    0x00aa: '８',
    0x00ab: '９',
    0x00ac: 'Ａ',
    0x00ad: 'Ｂ',
    0x00ae: 'Ｃ',
    0x00af: 'Ｄ',
    0x00b0: 'Ｅ',
    0x00b1: 'Ｆ',
    0x00b2: 'Ｇ',
    0x00b3: 'Ｈ',
    0x00b4: 'Ｉ',
    0x00b5: 'Ｊ',
    0x00b6: 'Ｋ',
    0x00b7: 'Ｌ',
    0x00b8: 'Ｍ',
    0x00b9: 'Ｎ',
    0x00ba: 'Ｏ',
    0x00bb: 'Ｐ',
    0x00bc: 'Ｑ',
    0x00bd: 'Ｒ',
    0x00be: 'Ｓ',
    0x00bf: 'Ｔ',
    0x00c0: 'Ｕ',
    0x00c1: 'Ｖ',
    0x00c2: 'Ｗ',
    0x00c3: 'Ｘ',
    0x00c4: 'Ｙ',
    0x00c5: 'Ｚ',
    0x00c6: 'ａ',
    0x00c7: 'ｂ',
    0x00c8: 'ｃ',
    0x00c9: 'ｄ',
    0x00ca: 'ｅ',
    0x00cb: 'ｆ',
    0x00cc: 'ｇ',
    0x00cd: 'ｈ',
    0x00ce: 'ｉ',
    0x00cf: 'ｊ',
    0x00d0: 'ｋ',
    0x00d1: 'ｌ',
    0x00d2: 'ｍ',
    0x00d3: 'ｎ',
    0x00d4: 'ｏ',
    0x00d5: 'ｐ',
    0x00d6: 'ｑ',
    0x00d7: 'ｒ',
    0x00d8: 'ｓ',
    0x00d9: 'ｔ',
    0x00da: 'ｕ',
    0x00db: 'ｖ',
    0x00dc: 'ｗ',
    0x00dd: 'ｘ',
    0x00de: 'ｙ',
    0x00df: 'ｚ',
    0x00e0: 'à',
    0x00e1: '！',
    0x00e2: '？',
    0x00e3: '、',
    0x00e4: '。',
    0x00e5: '…',
    0x00e6: '・',
    0x00e7: '／',
    0x00e8: '「',
    0x00e9: '」',
    0x00ea: '『',
    0x00eb: '』',
    0x00ec: '（',
    0x00ed: '）',
    0x00ee: '♂',
    0x00ef: '♀',
    0x00f0: '＋',
    0x00f1: 'ー',
    0x00f2: '×',
    0x00f3: '÷',
    0x00f4: '=',
    0x00f5: '~',
    0x00f6: '：',
    0x00f7: '；',
    0x00f8: '．',
    0x00f9: '，',
    0x00fa: '♠',
    0x00fb: '♣',
    0x00fc: '♥',
    0x00fd: '♦',
    0x00fe: '★',
    0x00ff: '◎',
    0x0100: '○',
    0x0101: '□',
    0x0102: '△',
    0x0103: '◇',
    0x0104: '＠',
    0x0105: '♪',
    0x0106: '%',
    0x0107: '☀',
    0x0108: '☁',
    0x0109: '☂',
    0x010a: '☃',
    0x010f: '⤴',
    0x0110: '⤵',
    0x0112: '円',
    0x0116: '✉',
    0x011b: '←',
    0x011c: '↑',
    0x011d: '↓',
    0x011e: '→',
    0x0120: '&',
    0x0121: '0',
    0x0122: '1',
    0x0123: '2',
    0x0124: '3',
    0x0125: '4',
    0x0126: '5',
    0x0127: '6',
    0x0128: '7',
    0x0129: '8',
    0x012a: '9',
    0x012b: 'A',
    0x012c: 'B',
    0x012d: 'C',
    0x012e: 'D',
    0x012f: 'E',
    0x0130: 'F',
    0x0131: 'G',
    0x0132: 'H',
    0x0133: 'I',
    0x0134: 'J',
    0x0135: 'K',
    0x0136: 'L',
    0x0137: 'M',
    0x0138: 'N',
    0x0139: 'O',
    0x013a: 'P',
    0x013b: 'Q',
    0x013c: 'R',
    0x013d: 'S',
    0x013e: 'T',
    0x013f: 'U',
    0x0140: 'V',
    0x0141: 'W',
    0x0142: 'X',
    0x0143: 'Y',
    0x0144: 'Z',
    0x0145: 'a',
    0x0146: 'b',
    0x0147: 'c',
    0x0148: 'd',
    0x0149: 'e',
    0x014a: 'f',
    0x014b: 'g',
    0x014c: 'h',
    0x014d: 'i',
    0x014e: 'j',
    0x014f: 'k',
    0x0150: 'l',
    0x0151: 'm',
    0x0152: 'n',
    0x0153: 'o',
    0x0154: 'p',
    0x0155: 'q',
    0x0156: 'r',
    0x0157: 's',
    0x0158: 't',
    0x0159: 'u',
    0x015a: 'v',
    0x015b: 'w',
    0x015c: 'x',
    0x015d: 'y',
    0x015e: 'z',
    0x015f: 'À',
    0x0160: 'Á',
    0x0161: 'Â',
    0x0163: 'Ä',
    0x0166: 'Ç',
    0x0167: 'È',
    0x0168: 'É',
    0x0169: 'Ê',
    0x016a: 'Ë',
    0x016b: 'Ì',
    0x016c: 'Í',
    0x016d: 'Î',
    0x016e: 'Ï',
    0x0170: 'Ñ',
    0x0171: 'Ò',
    0x0172: 'Ó',
    0x0173: 'Ô',
    0x0175: 'Ö',
    0x0176: '×',
    0x0178: 'Ù',
    0x0179: 'Ú',
    0x017a: 'Û',
    0x017b: 'Ü',
    0x017e: 'ß',
    0x017f: 'à',
    0x0180: 'á',
    0x0181: 'â',
    0x0183: 'ä',
    0x0186: 'ç',
    0x0187: 'è',
    0x0188: 'é',
    0x0189: 'ê',
    0x018a: 'ë',
    0x018b: 'ì',
    0x018c: 'í',
    0x018d: 'î',
    0x018e: 'ï',
    0x0190: 'ñ',
    0x0191: 'ò',
    0x0192: 'ó',
    0x0193: 'ô',
    0x0195: 'ö',
    0x0196: '÷',
    0x0198: 'ù',
    0x0199: 'ú',
    0x019a: 'û',
    0x019b: 'ü',
    0x019f: 'Œ',
    0x01a0: 'œ',
    0x01a3: 'ª',
    0x01a4: 'º',
    0x01a5: 'þ',
    0x01a6: 'Þ',
    0x01a7: 'ʳ',
    0x01a8: '¥',
    0x01a9: '¡',
    0x01aa: '¿',
    0x01ab: '!',
    0x01ac: '?',
    0x01ad: ',',
    0x01ae: '.',
    0x01af: '…',
    0x01b0: '·',
    0x01b1: '/',
    0x01b2: '‘',
    0x01b3: '\'',
    0x01b3: '’',
    0x01b4: '“',
    0x01b5: '”',
    0x01b6: '„',
    0x01b7: '«',
    0x01b8: '»',
    0x01b9: '(',
    0x01ba: ')',
    0x01bb: '♂',
    0x01bc: '♀',
    0x01bd: '+',
    0x01be: '-',
    0x01bf: '*',
    0x01c0: '#',
    0x01c1: '=',
    0x01c2: '&',
    0x01c3: '~',
    0x01c4: ':',
    0x01c5: ';',
    0x01c6: '♠',
    0x01c7: '♣',
    0x01c8: '♥',
    0x01c9: '♦',
    0x01ca: '★',
    0x01cb: '◎',
    0x01cc: '○',
    0x01cd: '□',
    0x01ce: '△',
    0x01cf: '◇',
    0x01d0: '@',
    0x01d1: '♪',
    0x01d2: '%',
    0x01d3: '☀',
    0x01d4: '☁',
    0x01d5: '☂',
    0x01d6: '☃',
    0x01db: '⤴',
    0x01dc: '⤵',
    0x01de: ' ',
    0xe000: '\n',
    0x25bc: '\f',
    0x25bd: '\r',
}

# And the reverse dict, used with str.translate()
inverse_character_table = dict()
for in_, out in character_table.items():
    inverse_character_table[ord(out)] = in_


def LittleEndianBitStruct(*args):
    """Construct's bit structs read a byte at a time in the order they appear,
    reading each bit from most to least significant.  Alas, this doesn't work
    at all for a 32-bit bit field, because the bytes are 'backwards' in
    little-endian files.

    So this acts as a bit struct, but reverses the order of bytes before
    reading/writing, so ALL the bits are read from most to least significant.
    """
    return Buffered(
        BitStruct(*args),
        encoder=lambda s: s[::-1],
        decoder=lambda s: s[::-1],
        resizer=lambda _: _,
    )

class PokemonStringAdapter(Adapter):
    """Adapter that encodes/decodes Pokémon-formatted text stored in a regular
    String struct.
    """
    def _decode(self, obj, context):
        decoded_text = obj.decode('utf16')

        # Real string ends at the \uffff character
        if '\uffff' in decoded_text:
            decoded_text = decoded_text[0:decoded_text.index('\uffff')]
            # XXX save "trash bytes" somewhere..?

        return decoded_text.translate(character_table)

    def _encode(self, obj, context):
        #padded_text = (obj + u'\xffff' + '\x00' * 12)
        padded_text = obj
        decoded_text = padded_text.translate(inverse_character_table)
        return decoded_text.encode('utf16')

class DateAdapter(Adapter):
    """Converts between a three-byte string and a Python date.

    Only dates in 2000 or later will work!
    """
    def _decode(self, obj, context):
        if obj == '\x00\x00\x00':
            return None

        y, m, d = (ord(byte) for byte in obj)
        y += 2000
        return datetime.date(y, m, d)

    def _encode(self, obj, context):
        if obj is None:
            return '\x00\x00\x00'

        y, m, d = obj.year - 2000, obj.month, obj.day
        return ''.join(chr(n) for n in (y, m, d))

class PokemonFormAdapter(Adapter):
    """Converts form ids to form names, and vice versa."""
    pokemon_forms = {
        # Unown
        201: 'abcdefghijklmnopqrstuvwxyz!?',

        # Deoxys
        386: ['normal', 'attack', 'defense', 'speed'],

        # Burmy and Wormadam
        412: ['plant', 'sandy', 'trash'],
        413: ['plant', 'sandy', 'trash'],

        # Shellos and Gastrodon
        422: ['west', 'east'],
        423: ['west', 'east'],

        # Rotom
        479: ['normal', 'heat', 'wash', 'frost', 'fan', 'cut'],

        # Giratina
        487: ['altered', 'origin'],

        # Shaymin
        492: ['land', 'sky'],

        # Arceus
        493: [
            'normal', 'fighting', 'flying', 'poison', 'ground', 'rock',
            'bug', 'ghost', 'steel', 'fire', 'water', 'grass',
            'thunder', 'psychic', 'ice', 'dragon', 'dark', '???',
        ],
    }

    def _decode(self, obj, context):
        try:
            forms = self.pokemon_forms[ context['national_id'] ]
        except KeyError:
            return None

        return forms[obj >> 3]

    def _encode(self, obj, context):
        try:
            forms = self.pokemon_forms[ context['national_id'] ]
        except KeyError:
            return None

        return forms.index(obj) << 3



# And here we go.
# Docs: http://projectpokemon.org/wiki/Pokemon_NDS_Structure
pokemon_struct = Struct('pokemon_struct',
    # Header
    ULInt32('personality'),  # XXX aughgh http://bulbapedia.bulbagarden.net/wiki/Personality
    Padding(2),
    ULInt16('checksum'),  # XXX should be checked or calculated

    # Block A
    ULInt16('national_id'),
    ULInt16('held_item_id'),
    ULInt16('original_trainer_id'),
    ULInt16('original_trainer_secret_id'),
    ULInt32('exp'),
    ULInt8('happiness'),
    ULInt8('ability_id'),  # XXX needs to match personality + species
    BitStruct('markings',
        Padding(2),
        Flag('diamond'),
        Flag('star'),
        Flag('heart'),
        Flag('square'),
        Flag('triangle'),
        Flag('circle'),
    ),
    Enum(
        ULInt8('original_country'),
        jp=1,
        us=2,
        fr=3,
        it=4,
        de=5,
        es=7,
        kr=8,
    ),

    # XXX sum cannot surpass 510
    ULInt8('effort_hp'),
    ULInt8('effort_attack'),
    ULInt8('effort_defense'),
    ULInt8('effort_speed'),
    ULInt8('effort_special_attack'),
    ULInt8('effort_special_defense'),

    ULInt8('contest_cool'),
    ULInt8('contest_beauty'),
    ULInt8('contest_cute'),
    ULInt8('contest_smart'),
    ULInt8('contest_tough'),
    ULInt8('contest_sheen'),

    LittleEndianBitStruct('sinnoh_ribbons',
        Padding(4),
        Flag('premier_ribbon'),
        Flag('classic_ribbon'),
        Flag('carnival_ribbon'),
        Flag('festival_ribbon'),
        Flag('blue_ribbon'),
        Flag('green_ribbon'),
        Flag('red_ribbon'),
        Flag('legend_ribbon'),
        Flag('history_ribbon'),
        Flag('record_ribbon'),
        Flag('footprint_ribbon'),
        Flag('gorgeous_royal_ribbon'),
        Flag('royal_ribbon'),
        Flag('gorgeous_ribbon'),
        Flag('smile_ribbon'),
        Flag('snooze_ribbon'),
        Flag('relax_ribbon'),
        Flag('careless_ribbon'),
        Flag('downcast_ribbon'),
        Flag('shock_ribbon'),
        Flag('alert_ribbon'),
        Flag('world_ability_ribbon'),
        Flag('pair_ability_ribbon'),
        Flag('multi_ability_ribbon'),
        Flag('double_ability_ribbon'),
        Flag('great_ability_ribbon'),
        Flag('ability_ribbon'),
        Flag('sinnoh_champ_ribbon'),
    ),

    # Block B
    ULInt16('move1_id'),
    ULInt16('move2_id'),
    ULInt16('move3_id'),
    ULInt16('move4_id'),
    ULInt8('move1_pp'),
    ULInt8('move2_pp'),
    ULInt8('move3_pp'),
    ULInt8('move4_pp'),
    ULInt8('move1_pp_ups'),
    ULInt8('move2_pp_ups'),
    ULInt8('move3_pp_ups'),
    ULInt8('move4_pp_ups'),

    LittleEndianBitStruct('ivs',
        Flag('is_nicknamed'),
        Flag('is_egg'),
        BitField('iv_special_defense', 5),
        BitField('iv_special_attack', 5),
        BitField('iv_speed', 5),
        BitField('iv_defense', 5),
        BitField('iv_attack', 5),
        BitField('iv_hp', 5),
    ),
    LittleEndianBitStruct('hoenn_ribbons',
        Flag('world_ribbon'),
        Flag('earth_ribbon'),
        Flag('national_ribbon'),
        Flag('country_ribbon'),
        Flag('sky_ribbon'),
        Flag('land_ribbon'),
        Flag('marine_ribbon'),
        Flag('effort_ribbon'),
        Flag('artist_ribbon'),
        Flag('victory_ribbon'),
        Flag('winning_ribbon'),
        Flag('champion_ribbon'),
        Flag('tough_ribbon_master'),
        Flag('tough_ribbon_hyper'),
        Flag('tough_ribbon_super'),
        Flag('tough_ribbon'),
        Flag('smart_ribbon_master'),
        Flag('smart_ribbon_hyper'),
        Flag('smart_ribbon_super'),
        Flag('smart_ribbon'),
        Flag('cute_ribbon_master'),
        Flag('cute_ribbon_hyper'),
        Flag('cute_ribbon_super'),
        Flag('cute_ribbon'),
        Flag('beauty_ribbon_master'),
        Flag('beauty_ribbon_hyper'),
        Flag('beauty_ribbon_super'),
        Flag('beauty_ribbon'),
        Flag('cool_ribbon_master'),
        Flag('cool_ribbon_hyper'),
        Flag('cool_ribbon_super'),
        Flag('cool_ribbon'),
    ),
    EmbeddedBitStruct(
        PokemonFormAdapter(BitField('alternate_form', 5)),
        Enum(BitField('gender', 2),
            genderless = 2,
            male = 0,
            female = 1,
        ),
        Flag('fateful_encounter'),
    ),
    BitStruct('shining_leaves',
        Padding(2),
        Flag('crown'),
        Flag('leaf5'),
        Flag('leaf4'),
        Flag('leaf3'),
        Flag('leaf2'),
        Flag('leaf1'),
    ),
    Padding(2),
    ULInt16('pt_egg_location_id'),
    ULInt16('pt_met_location_id'),

    # Block C
    PokemonStringAdapter(String('nickname', 22)),
    Padding(1),
    Enum(ULInt8('original_version'),
        sapphire = 1,
        ruby = 2,
        emerald = 3,
        firered = 4,
        leafgreen = 5,
        heartgold = 7,
        soulsilver = 8,
        diamond = 10,
        pearl = 11,
        platinum = 12,
        orre = 15,
    ),
    LittleEndianBitStruct('sinnoh_contest_ribbons',
        Padding(12),
        Flag('tough_ribbon_master'),
        Flag('tough_ribbon_ultra'),
        Flag('tough_ribbon_great'),
        Flag('tough_ribbon'),
        Flag('smart_ribbon_master'),
        Flag('smart_ribbon_ultra'),
        Flag('smart_ribbon_great'),
        Flag('smart_ribbon'),
        Flag('cute_ribbon_master'),
        Flag('cute_ribbon_ultra'),
        Flag('cute_ribbon_great'),
        Flag('cute_ribbon'),
        Flag('beauty_ribbon_master'),
        Flag('beauty_ribbon_ultra'),
        Flag('beauty_ribbon_great'),
        Flag('beauty_ribbon'),
        Flag('cool_ribbon_master'),
        Flag('cool_ribbon_ultra'),
        Flag('cool_ribbon_great'),
        Flag('cool_ribbon'),
    ),
    Padding(4),

    # Block D
    PokemonStringAdapter(String('original_trainer_name', 16)),
    DateAdapter(String('date_egg_received', 3)),
    DateAdapter(String('date_met', 3)),
    ULInt16('dp_egg_location_id'),
    ULInt16('dp_met_location_id'),
    ULInt8('pokerus'),
    ULInt8('dppt_pokeball'),
    EmbeddedBitStruct(
        Enum(Flag('original_trainer_gender'),
            male = False,
            female = True,
        ),
        BitField('met_at_level', 7),
    ),
    Enum(ULInt8('encounter_type'),
        special = 0,        # egg; pal park; event; honey tree; shaymin
        grass = 2,          # or darkrai
        dialga_palkia = 4,
        cave = 5,           # or giratina or hall of origin
        water = 7,
        building = 9,
        safari_zone = 10,   # includes great marsh
        gift = 12,          # starter; fossil; ingame trade?
        # distortion_world = ???,
        hgss_gift = 24,     # starter; fossil; bebe's eevee  (pt only??)
    ),
    ULInt8('hgss_pokeball'),
    Padding(1),
)
